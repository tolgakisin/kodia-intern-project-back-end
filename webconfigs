package com.kodia.config;


import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ResourceBundleMessageSource;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.web.servlet.config.annotation.*;
import org.springframework.web.servlet.resource.PathResourceResolver;
import org.springframework.web.servlet.view.InternalResourceViewResolver;
import org.springframework.web.servlet.view.JstlView;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;


@EnableWebMvc
@ComponentScan(basePackages = {"com.kodia"})
@Configuration
public class WebConfig{
//
////    @Bean
////    public InternalResourceViewResolver jspViewResolver(){
////        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();
////        viewResolver.setViewClass(JstlView.class);
////        viewResolver.setPrefix("/WEB-INF/view/");
////        viewResolver.setSuffix(".jsp");
////        viewResolver.setContentType("text/html;charset=UTF-8");
////        return viewResolver;
////    }
////    @Bean
////    public MessageSource messageSource() {
////        ResourceBundleMessageSource source = new ResourceBundleMessageSource();
////        source.setBasename("messages");
////        return source;
////    }
//
////    @Bean
////    public Jackson2ObjectMapperBuilder jackson2ObjectMapperBuilder() {
////        Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder();
////        builder.featuresToDisable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
////        return builder;
////    }
//    // gelen isteğin mesaj tipi konfigrasyonu
//   @Override
//    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
////        StringHttpMessageConverter stringConverter = new StringHttpMessageConverter();
//        List<MediaType> mediaTypeList = new ArrayList<>();
//        MappingJackson2HttpMessageConverter jsonConverter = new MappingJackson2HttpMessageConverter();
////        mediaTypeList.add(new MediaType("text", "plain", Charset.forName("UTF-8")));
////        mediaTypeList.add(new MediaType("text", "html", Charset.forName("UTF-8")));
//        mediaTypeList.add(new MediaType("application", "json", Charset.forName("UTF-8")));
////        //mediaTypeList.add(new MediaType("text", "javascript", Charset.forName("UTF-8")));
////        stringConverter.setSupportedMediaTypes(mediaTypeList);
//        jsonConverter.setSupportedMediaTypes(mediaTypeList);
////        converters.add(stringConverter);
//        converters.add(jsonConverter);
//        super.addDefaultHttpMessageConverters(converters);
//    }

//    @Bean
//    public MappingJackson2HttpMessageConverter customJackson2HttpMessageConverter() {
//        MappingJackson2HttpMessageConverter jsonConverter = new MappingJackson2HttpMessageConverter();
////        ObjectMapper objectMapper = new ObjectMapper();
////        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
////        jsonConverter.setObjectMapper(objectMapper);
//        return jsonConverter;
//    }
//    // resource tanımlama
////    public void addResourceHandlers(ResourceHandlerRegistry registry){
////        registry.addResourceHandler("/resources/**")
////                .addResourceLocations("/resources/images/")
////                .setCachePeriod(3600)
////                .resourceChain(true)
////                .addResolver(new PathResourceResolver());
////    }
}
